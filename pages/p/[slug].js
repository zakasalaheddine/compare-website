import { dehydrate, QueryClient, useQuery } from '@tanstack/react-query'
import Head from 'next/head'
import { useRouter } from 'next/router'
import Layout from '../../components/layout'
import { getNetworkData } from '../../queries/network'
import { getNetworkSinglePageBySlug } from '../../queries/singlePage'

export default function SinglePage() {
  const {
    query: { slug }
  } = useRouter()
  const { data, isLoading } = useQuery(['network'], () => getNetworkSinglePageBySlug(slug))
  if(isLoading) return <div>is Loading ...</div>
  const {
    pages,
    footer,
    advertiserDisclosureTitle,
    advertiserDisclosureContent
  } = data
  const [currentPage] = pages
  return (
    <>
      <Head>
        <title>Single Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout
        page={currentPage.page_id}
        footer={footer}
        isHome={false}
        disclosureTitle={advertiserDisclosureTitle}
        disclosureContent={advertiserDisclosureContent}
      />
    </>
  )
}

export async function getStaticPaths() {
  const { pages } = await getNetworkData()
  const paths = pages.reduce((accum, { page_id }) => {
    accum.push({ params: { slug: page_id.slug } })
    return accum
  }, [])
  return {
    paths,
    fallback: false // can also be true or 'blocking'
  }
}

export async function getStaticProps(context) {
  const { slug } = context.params
  const queryClient = new QueryClient()
  await queryClient.prefetchQuery(
    ['networkSinglePage', slug],
    () => getNetworkSinglePageBySlug(slug)
  )
  return {
    // Passed to the page component as props
    props: {
      dehydratedState: dehydrate(queryClient)
    }
  }
}
